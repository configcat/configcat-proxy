// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: flag_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlagServiceClient is the client API for FlagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlagServiceClient interface {
	EvalFlag(ctx context.Context, in *Request, opts ...grpc.CallOption) (FlagService_EvalFlagClient, error)
}

type flagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlagServiceClient(cc grpc.ClientConnInterface) FlagServiceClient {
	return &flagServiceClient{cc}
}

func (c *flagServiceClient) EvalFlag(ctx context.Context, in *Request, opts ...grpc.CallOption) (FlagService_EvalFlagClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlagService_ServiceDesc.Streams[0], "/configcat.FlagService/EvalFlag", opts...)
	if err != nil {
		return nil, err
	}
	x := &flagServiceEvalFlagClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlagService_EvalFlagClient interface {
	Recv() (*Payload, error)
	grpc.ClientStream
}

type flagServiceEvalFlagClient struct {
	grpc.ClientStream
}

func (x *flagServiceEvalFlagClient) Recv() (*Payload, error) {
	m := new(Payload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FlagServiceServer is the server API for FlagService service.
// All implementations must embed UnimplementedFlagServiceServer
// for forward compatibility
type FlagServiceServer interface {
	EvalFlag(*Request, FlagService_EvalFlagServer) error
	mustEmbedUnimplementedFlagServiceServer()
}

// UnimplementedFlagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlagServiceServer struct {
}

func (UnimplementedFlagServiceServer) EvalFlag(*Request, FlagService_EvalFlagServer) error {
	return status.Errorf(codes.Unimplemented, "method EvalFlag not implemented")
}
func (UnimplementedFlagServiceServer) mustEmbedUnimplementedFlagServiceServer() {}

// UnsafeFlagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlagServiceServer will
// result in compilation errors.
type UnsafeFlagServiceServer interface {
	mustEmbedUnimplementedFlagServiceServer()
}

func RegisterFlagServiceServer(s grpc.ServiceRegistrar, srv FlagServiceServer) {
	s.RegisterService(&FlagService_ServiceDesc, srv)
}

func _FlagService_EvalFlag_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlagServiceServer).EvalFlag(m, &flagServiceEvalFlagServer{stream})
}

type FlagService_EvalFlagServer interface {
	Send(*Payload) error
	grpc.ServerStream
}

type flagServiceEvalFlagServer struct {
	grpc.ServerStream
}

func (x *flagServiceEvalFlagServer) Send(m *Payload) error {
	return x.ServerStream.SendMsg(m)
}

// FlagService_ServiceDesc is the grpc.ServiceDesc for FlagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configcat.FlagService",
	HandlerType: (*FlagServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EvalFlag",
			Handler:       _FlagService_EvalFlag_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flag_service.proto",
}
