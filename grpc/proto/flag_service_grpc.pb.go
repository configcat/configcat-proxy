// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.1
// source: flag_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FlagService_EvalFlagStream_FullMethodName     = "/configcat.FlagService/EvalFlagStream"
	FlagService_EvalAllFlagsStream_FullMethodName = "/configcat.FlagService/EvalAllFlagsStream"
	FlagService_EvalFlag_FullMethodName           = "/configcat.FlagService/EvalFlag"
	FlagService_EvalAllFlags_FullMethodName       = "/configcat.FlagService/EvalAllFlags"
	FlagService_GetKeys_FullMethodName            = "/configcat.FlagService/GetKeys"
	FlagService_Refresh_FullMethodName            = "/configcat.FlagService/Refresh"
)

// FlagServiceClient is the client API for FlagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlagServiceClient interface {
	EvalFlagStream(ctx context.Context, in *EvalRequest, opts ...grpc.CallOption) (FlagService_EvalFlagStreamClient, error)
	EvalAllFlagsStream(ctx context.Context, in *EvalRequest, opts ...grpc.CallOption) (FlagService_EvalAllFlagsStreamClient, error)
	EvalFlag(ctx context.Context, in *EvalRequest, opts ...grpc.CallOption) (*EvalResponse, error)
	EvalAllFlags(ctx context.Context, in *EvalRequest, opts ...grpc.CallOption) (*EvalAllResponse, error)
	GetKeys(ctx context.Context, in *KeysRequest, opts ...grpc.CallOption) (*KeysResponse, error)
	Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type flagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlagServiceClient(cc grpc.ClientConnInterface) FlagServiceClient {
	return &flagServiceClient{cc}
}

func (c *flagServiceClient) EvalFlagStream(ctx context.Context, in *EvalRequest, opts ...grpc.CallOption) (FlagService_EvalFlagStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlagService_ServiceDesc.Streams[0], FlagService_EvalFlagStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &flagServiceEvalFlagStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlagService_EvalFlagStreamClient interface {
	Recv() (*EvalResponse, error)
	grpc.ClientStream
}

type flagServiceEvalFlagStreamClient struct {
	grpc.ClientStream
}

func (x *flagServiceEvalFlagStreamClient) Recv() (*EvalResponse, error) {
	m := new(EvalResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flagServiceClient) EvalAllFlagsStream(ctx context.Context, in *EvalRequest, opts ...grpc.CallOption) (FlagService_EvalAllFlagsStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlagService_ServiceDesc.Streams[1], FlagService_EvalAllFlagsStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &flagServiceEvalAllFlagsStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlagService_EvalAllFlagsStreamClient interface {
	Recv() (*EvalAllResponse, error)
	grpc.ClientStream
}

type flagServiceEvalAllFlagsStreamClient struct {
	grpc.ClientStream
}

func (x *flagServiceEvalAllFlagsStreamClient) Recv() (*EvalAllResponse, error) {
	m := new(EvalAllResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flagServiceClient) EvalFlag(ctx context.Context, in *EvalRequest, opts ...grpc.CallOption) (*EvalResponse, error) {
	out := new(EvalResponse)
	err := c.cc.Invoke(ctx, FlagService_EvalFlag_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flagServiceClient) EvalAllFlags(ctx context.Context, in *EvalRequest, opts ...grpc.CallOption) (*EvalAllResponse, error) {
	out := new(EvalAllResponse)
	err := c.cc.Invoke(ctx, FlagService_EvalAllFlags_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flagServiceClient) GetKeys(ctx context.Context, in *KeysRequest, opts ...grpc.CallOption) (*KeysResponse, error) {
	out := new(KeysResponse)
	err := c.cc.Invoke(ctx, FlagService_GetKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *flagServiceClient) Refresh(ctx context.Context, in *RefreshRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FlagService_Refresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlagServiceServer is the server API for FlagService service.
// All implementations must embed UnimplementedFlagServiceServer
// for forward compatibility
type FlagServiceServer interface {
	EvalFlagStream(*EvalRequest, FlagService_EvalFlagStreamServer) error
	EvalAllFlagsStream(*EvalRequest, FlagService_EvalAllFlagsStreamServer) error
	EvalFlag(context.Context, *EvalRequest) (*EvalResponse, error)
	EvalAllFlags(context.Context, *EvalRequest) (*EvalAllResponse, error)
	GetKeys(context.Context, *KeysRequest) (*KeysResponse, error)
	Refresh(context.Context, *RefreshRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedFlagServiceServer()
}

// UnimplementedFlagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlagServiceServer struct {
}

func (UnimplementedFlagServiceServer) EvalFlagStream(*EvalRequest, FlagService_EvalFlagStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EvalFlagStream not implemented")
}
func (UnimplementedFlagServiceServer) EvalAllFlagsStream(*EvalRequest, FlagService_EvalAllFlagsStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EvalAllFlagsStream not implemented")
}
func (UnimplementedFlagServiceServer) EvalFlag(context.Context, *EvalRequest) (*EvalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalFlag not implemented")
}
func (UnimplementedFlagServiceServer) EvalAllFlags(context.Context, *EvalRequest) (*EvalAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvalAllFlags not implemented")
}
func (UnimplementedFlagServiceServer) GetKeys(context.Context, *KeysRequest) (*KeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKeys not implemented")
}
func (UnimplementedFlagServiceServer) Refresh(context.Context, *RefreshRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedFlagServiceServer) mustEmbedUnimplementedFlagServiceServer() {}

// UnsafeFlagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlagServiceServer will
// result in compilation errors.
type UnsafeFlagServiceServer interface {
	mustEmbedUnimplementedFlagServiceServer()
}

func RegisterFlagServiceServer(s grpc.ServiceRegistrar, srv FlagServiceServer) {
	s.RegisterService(&FlagService_ServiceDesc, srv)
}

func _FlagService_EvalFlagStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EvalRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlagServiceServer).EvalFlagStream(m, &flagServiceEvalFlagStreamServer{stream})
}

type FlagService_EvalFlagStreamServer interface {
	Send(*EvalResponse) error
	grpc.ServerStream
}

type flagServiceEvalFlagStreamServer struct {
	grpc.ServerStream
}

func (x *flagServiceEvalFlagStreamServer) Send(m *EvalResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FlagService_EvalAllFlagsStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EvalRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlagServiceServer).EvalAllFlagsStream(m, &flagServiceEvalAllFlagsStreamServer{stream})
}

type FlagService_EvalAllFlagsStreamServer interface {
	Send(*EvalAllResponse) error
	grpc.ServerStream
}

type flagServiceEvalAllFlagsStreamServer struct {
	grpc.ServerStream
}

func (x *flagServiceEvalAllFlagsStreamServer) Send(m *EvalAllResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FlagService_EvalFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagServiceServer).EvalFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlagService_EvalFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagServiceServer).EvalFlag(ctx, req.(*EvalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlagService_EvalAllFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagServiceServer).EvalAllFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlagService_EvalAllFlags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagServiceServer).EvalAllFlags(ctx, req.(*EvalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlagService_GetKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagServiceServer).GetKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlagService_GetKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagServiceServer).GetKeys(ctx, req.(*KeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FlagService_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlagServiceServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FlagService_Refresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlagServiceServer).Refresh(ctx, req.(*RefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlagService_ServiceDesc is the grpc.ServiceDesc for FlagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "configcat.FlagService",
	HandlerType: (*FlagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EvalFlag",
			Handler:    _FlagService_EvalFlag_Handler,
		},
		{
			MethodName: "EvalAllFlags",
			Handler:    _FlagService_EvalAllFlags_Handler,
		},
		{
			MethodName: "GetKeys",
			Handler:    _FlagService_GetKeys_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _FlagService_Refresh_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EvalFlagStream",
			Handler:       _FlagService_EvalFlagStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "EvalAllFlagsStream",
			Handler:       _FlagService_EvalAllFlagsStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flag_service.proto",
}
